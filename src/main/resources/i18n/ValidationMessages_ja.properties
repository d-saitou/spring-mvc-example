NotBlank = 必須の項目です。
NotEmpty = 必須の項目です。
NotNull  = 必須の項目です。
Min      = {1}以上の値を入力してください。
Max      = {1}以下の値を入力してください。
Size     = {2}～{1}文字の値を入力してください。
Future   = 未来の日付を入力してください。
Past     = 過去の日付を入力してください。
Email    = メールアドレスを入力してください。

typeMismatch.java.lang.Integer = 整数を入力してください。
typeMismatch.java.util.Date    = 日付を入力してください。(例:2017/01/01)
typeMismatch                   = 無効な入力です。

# カスタムバリデーション
com.example.springmvc.application.validation.DateFormatCheckForString.message = 日付を入力してください。 (例:2017/01/01 または 01/01/2017)

# Hibernate標準メッセージ (ValidationMessages.properties)
#
#javax.validation.constraints.AssertFalse.message = must be false
#javax.validation.constraints.AssertTrue.message  = must be true
#javax.validation.constraints.DecimalMax.message  = must be less than ${inclusive == true ? 'or equal to ' : ''}{value}
#javax.validation.constraints.DecimalMin.message  = must be greater than ${inclusive == true ? 'or equal to ' : ''}{value}
#javax.validation.constraints.Digits.message      = numeric value out of bounds (<{integer} digits>.<{fraction} digits> expected)
#javax.validation.constraints.Future.message      = must be in the future
#javax.validation.constraints.Max.message         = must be less than or equal to {value}
#javax.validation.constraints.Min.message         = must be greater than or equal to {value}
#javax.validation.constraints.NotNull.message     = may not be null
#javax.validation.constraints.Null.message        = must be null
#javax.validation.constraints.Past.message        = must be in the past
#javax.validation.constraints.Pattern.message     = must match "{regexp}"
#javax.validation.constraints.Size.message        = size must be between {min} and {max}
#
#org.hibernate.validator.constraints.CreditCardNumber.message        = invalid credit card number
#org.hibernate.validator.constraints.EAN.message                     = invalid {type} barcode
#org.hibernate.validator.constraints.Email.message                   = not a well-formed email address
#org.hibernate.validator.constraints.Length.message                  = length must be between {min} and {max}
#org.hibernate.validator.constraints.LuhnCheck.message               = The check digit for ${validatedValue} is invalid, Luhn Modulo 10 checksum failed
#org.hibernate.validator.constraints.Mod10Check.message              = The check digit for ${validatedValue} is invalid, Modulo 10 checksum failed
#org.hibernate.validator.constraints.Mod11Check.message              = The check digit for ${validatedValue} is invalid, Modulo 11 checksum failed
#org.hibernate.validator.constraints.ModCheck.message                = The check digit for ${validatedValue} is invalid, ${modType} checksum failed
#org.hibernate.validator.constraints.NotBlank.message                = may not be empty
#org.hibernate.validator.constraints.NotEmpty.message                = may not be empty
#org.hibernate.validator.constraints.ParametersScriptAssert.message  = script expression "{script}" didn't evaluate to true
#org.hibernate.validator.constraints.Range.message                   = must be between {min} and {max}
#org.hibernate.validator.constraints.SafeHtml.message                = may have unsafe html content
#org.hibernate.validator.constraints.ScriptAssert.message            = script expression "{script}" didn't evaluate to true
#org.hibernate.validator.constraints.URL.message                     = must be a valid URL
#
#org.hibernate.validator.constraints.br.CNPJ.message                 = invalid Brazilian corporate taxpayer registry number (CNPJ)
#org.hibernate.validator.constraints.br.CPF.message                  = invalid Brazilian individual taxpayer registry number (CPF)
#org.hibernate.validator.constraints.br.TituloEleitoral.message      = invalid Brazilian Voter ID card number
